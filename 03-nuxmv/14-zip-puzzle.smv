MODULE main
VAR
    grid : array 0..3 of array 0..3 of 0..5;
    x: 0..3;
    y: 0..3;
    curr_max: 1..5;
INIT
    grid[0][0] = 0 & grid[0][1] = 0 & grid[0][2] = 4 & grid[0][3] = 5 &
    grid[1][0] = 0 & grid[1][1] = 1 & grid[1][2] = 0 & grid[1][3] = 0 &
    grid[2][0] = 0 & grid[2][1] = 0 & grid[2][2] = 0 & grid[2][3] = 0 &
    grid[3][0] = 2 & grid[3][1] = 0 & grid[3][2] = 0 & grid[3][3] = 3 &
    x = 1 & y = 1 & curr_max = 1;

ASSIGN
    next(curr_max) := max(curr_max, grid[y][x]);
DEFINE
    can_move_u := y > 0 & (grid[y - 1][x] in {0, curr_max + 1});
    can_move_d := y < 3 & (grid[y + 1][x] in {0, curr_max + 1});
    can_move_l := x > 0 & (grid[y][x - 1] in {0, curr_max + 1});
    can_move_r := x < 3 & (grid[y][x + 1] in {0, curr_max + 1});
ASSIGN
    next(y) := {y, y + 1, y - 1};
    next(x) := {x, x + 1, x - 1};
TRANS
    next(y) = y | next(x) = x;
TRANS
    next(y) = y - 1 -> can_move_u &
    next(y) = y + 1 -> can_move_d &
    next(x) = x - 1 -> can_move_l &
    next(x) = x + 1 -> can_move_r;
TRANS
    (next(x) = x & next(y) = y) -> !(can_move_d | can_move_u | can_move_l | can_move_r)

ASSIGN
    next(grid[0][0]) := (y = 0 & x = 0 & grid[0][0] = 0) ? curr_max : grid[0][0];
    next(grid[0][1]) := (y = 0 & x = 1 & grid[0][1] = 0) ? curr_max : grid[0][1];
    next(grid[0][2]) := (y = 0 & x = 2 & grid[0][2] = 0) ? curr_max : grid[0][2];
    next(grid[0][3]) := (y = 0 & x = 3 & grid[0][3] = 0) ? curr_max : grid[0][3];

    next(grid[1][0]) := (y = 1 & x = 0 & grid[1][0] = 0) ? curr_max : grid[1][0];
    next(grid[1][1]) := (y = 1 & x = 1 & grid[1][1] = 0) ? curr_max : grid[1][1];
    next(grid[1][2]) := (y = 1 & x = 2 & grid[1][2] = 0) ? curr_max : grid[1][2];
    next(grid[1][3]) := (y = 1 & x = 3 & grid[1][3] = 0) ? curr_max : grid[1][3];

    next(grid[2][0]) := (y = 2 & x = 0 & grid[2][0] = 0) ? curr_max : grid[2][0];
    next(grid[2][1]) := (y = 2 & x = 1 & grid[2][1] = 0) ? curr_max : grid[2][1];
    next(grid[2][2]) := (y = 2 & x = 2 & grid[2][2] = 0) ? curr_max : grid[2][2];
    next(grid[2][3]) := (y = 2 & x = 3 & grid[2][3] = 0) ? curr_max : grid[2][3];

    next(grid[3][0]) := (y = 3 & x = 0 & grid[3][0] = 0) ? curr_max : grid[3][0];
    next(grid[3][1]) := (y = 3 & x = 1 & grid[3][1] = 0) ? curr_max : grid[3][1];
    next(grid[3][2]) := (y = 3 & x = 2 & grid[3][2] = 0) ? curr_max : grid[3][2];
    next(grid[3][3]) := (y = 3 & x = 3 & grid[3][3] = 0) ? curr_max : grid[3][3];

LTLSPEC
    ! F(curr_max = 5);
