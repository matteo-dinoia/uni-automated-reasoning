MODULE rocks_evo(rocks, i, start_j, end_j)
ASSIGN
    next(rocks[i]) := case
        start_j = i : EE;
        end_j = i   : rocks[start_j];
        TRUE        : rocks[i];
    esac;


MODULE main
VAR
    rocks: array 0..6 of {Gr, Br, EE};
    start_j: 0..6;
    end_j: 0..6;
    r0 : rocks_evo(rocks, 0, start_j, end_j);
    r1 : rocks_evo(rocks, 1, start_j, end_j);
    r2 : rocks_evo(rocks, 2, start_j, end_j);
    r3 : rocks_evo(rocks, 3, start_j, end_j);
    r4 : rocks_evo(rocks, 4, start_j, end_j);
    r5 : rocks_evo(rocks, 5, start_j, end_j);
    r6 : rocks_evo(rocks, 6, start_j, end_j);

INIT
    rocks[0] = Gr & rocks[1] = Gr & rocks[2] = Gr &
    rocks[3] = EE &
    rocks[4] = Br & rocks[5] = Br & rocks[6] = Br;
INVAR
    (start_j - end_j) in {2, 1, 0, -1, -2} & rocks[end_j] = EE;
DEFINE
    inverted := rocks[0] = Br & rocks[1] = Br & rocks[2] = Br & rocks[3] = EE & rocks[4] = Gr & rocks[5] = Gr & rocks[6] = Gr;


LTLSPEC ! F inverted;
